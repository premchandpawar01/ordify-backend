# admin_dashboard.py
import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import requests
from datetime import datetime

API_BASE_URL = "http://127.0.0.1:5000"

class AdminDashboard:
    def __init__(self, root):
        self.root = root
        self.root.title("Admin Dashboard - Client Order Portal")
        self.root.state('zoomed')
        self.clients_list = []
        self.products_list = [] # Store full product list

        self.setup_styles()

        self.notebook = ttk.Notebook(root)
        self.notebook.pack(expand=True, fill='both', padx=10, pady=10)

        self.create_dashboard_tab()
        self.create_clients_tab()
        self.create_products_tab()
        self.create_orders_tab()
        self.create_challans_tab()
        self.create_monthly_bills_tab()

        self.refresh_all_data()

    def setup_styles(self):
        style = ttk.Style()
        style.theme_use('clam')
        style.configure("TFrame", background="#f0f0f0")
        style.configure("TLabel", background="#f0f0f0", font=("Helvetica", 10))
        style.configure("Header.TLabel", font=("Helvetica", 16, "bold"))
        style.configure("Treeview.Heading", font=("Helvetica", 10, "bold"))
        style.configure("TButton", padding=5, font=("Helvetica", 9))
        style.map("Danger.TButton",
          foreground=[('!active', 'white'), ('active', 'white')],
          background=[('!active', '#dc3545'), ('active', '#c82333')]
        )
        style.configure("Danger.TButton", bordercolor="#dc3545", lightcolor="#dc3545", darkcolor="#dc3545")
        style.map("Success.TButton",
          foreground=[('!active', 'white'), ('active', 'white')],
          background=[('!active', '#28a745'), ('active', '#218838')]
        )
        style.configure("Success.TButton", bordercolor="#28a745", lightcolor="#28a745", darkcolor="#28a745")

    def center_window(self, toplevel, width=400, height=300):
        toplevel.update_idletasks()
        parent_x = self.root.winfo_x()
        parent_y = self.root.winfo_y()
        parent_width = self.root.winfo_width()
        parent_height = self.root.winfo_height()
        x = parent_x + (parent_width // 2) - (width // 2)
        y = parent_y + (parent_height // 2) - (height // 2)
        toplevel.geometry(f"{width}x{height}+{x}+{y}")
        toplevel.resizable(False, False)

    def get_selected_item(self, tree, name):
        selected_item_id = tree.focus()
        if not selected_item_id:
            messagebox.showwarning("No Selection", f"Please select a {name} from the list first.")
            return None
        return tree.item(selected_item_id, "values")
        
    def get_selected_id(self, tree, name):
        values = self.get_selected_item(tree, name)
        return values[0] if values else None

    def handle_delete(self, tree, item_name, endpoint, refresh_callback):
        selected_id = self.get_selected_id(tree, item_name)
        if not selected_id: return
        
        if messagebox.askyesno("Confirm Delete", f"Are you sure you want to permanently delete this {item_name} (ID: {selected_id})? This cannot be undone."):
            try:
                response = requests.delete(f"{API_BASE_URL}{endpoint}/{selected_id}")
                response.raise_for_status()
                messagebox.showinfo("Success", response.json().get("message", f"{item_name.title()} deleted."))
                refresh_callback()
            except requests.exceptions.RequestException as e:
                error = e.response.json().get('error') if e.response and e.response.content else str(e)
                messagebox.showerror("API Error", f"Failed to delete {item_name}: {error}")
    
    def fetch_generic_details(self, endpoint):
        try:
            response = requests.get(f"{API_BASE_URL}{endpoint}")
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            messagebox.showerror("API Error", f"Could not fetch details: {e}")
            return None

    def create_dashboard_tab(self):
        frame = ttk.Frame(self.notebook, padding="10")
        self.notebook.add(frame, text='Dashboard')

        # Top frame for header and refresh button
        top_frame = ttk.Frame(frame)
        top_frame.pack(fill=tk.X, pady=(0, 10))
        ttk.Label(top_frame, text="Dashboard Overview", style="Header.TLabel").pack(side=tk.LEFT)
        ttk.Button(top_frame, text="Refresh Dashboard", command=self.refresh_dashboard_data).pack(side=tk.RIGHT)

        # --- Key Metrics Frame ---
        metrics_frame = ttk.LabelFrame(frame, text="📈 Key Metrics", padding="15")
        metrics_frame.pack(fill=tk.X, pady=10, anchor="n")
        
        metrics_content = ttk.Frame(metrics_frame)
        metrics_content.pack(fill=tk.X)
        
        # Configure columns to be of equal width
        metrics_content.grid_columnconfigure(0, weight=1)
        metrics_content.grid_columnconfigure(1, weight=1)
        metrics_content.grid_columnconfigure(2, weight=1)
        metrics_content.grid_columnconfigure(3, weight=1)

        # Create labels for the numbers (we will update text in refresh_dashboard_data)
        self.metric_new_orders_label = ttk.Label(metrics_content, text="--", font=("Helvetica", 22, "bold"), anchor="center")
        self.metric_pending_challans_label = ttk.Label(metrics_content, text="--", font=("Helvetica", 22, "bold"), anchor="center")
        self.metric_unbilled_challans_label = ttk.Label(metrics_content, text="--", font=("Helvetica", 22, "bold"), anchor="center")
        self.metric_overdue_bills_label = ttk.Label(metrics_content, text="--", font=("Helvetica", 22, "bold"), anchor="center", foreground="#28a745")
        
        self.metric_new_orders_label.grid(row=0, column=0, sticky="ew")
        self.metric_pending_challans_label.grid(row=0, column=1, sticky="ew")
        self.metric_unbilled_challans_label.grid(row=0, column=2, sticky="ew")
        self.metric_overdue_bills_label.grid(row=0, column=3, sticky="ew")

        # Create labels for the descriptions
        ttk.Label(metrics_content, text="New Orders Today", anchor="center").grid(row=1, column=0, sticky="ew", pady=(5, 5))
        ttk.Label(metrics_content, text="Pending Challans", anchor="center").grid(row=1, column=1, sticky="ew", pady=(5, 5))
        ttk.Label(metrics_content, text="Unbilled Challans", anchor="center").grid(row=1, column=2, sticky="ew", pady=(5, 5))
        ttk.Label(metrics_content, text="Overdue Bills", anchor="center").grid(row=1, column=3, sticky="ew", pady=(5, 5))

        # --- Low Stock Alerts (Existing Frame) ---
        alerts_frame = ttk.LabelFrame(frame, text="🔥 Low Stock Alerts", padding="10")
        alerts_frame.pack(fill=tk.X, pady=10, anchor="n")
        self.alerts_content_frame = ttk.Frame(alerts_frame)
        self.alerts_content_frame.pack(fill=tk.X, padx=5, pady=5)

    def create_clients_tab(self):
        frame = ttk.Frame(self.notebook, padding="10")
        self.notebook.add(frame, text='Clients')
        top_frame = ttk.Frame(frame)
        top_frame.pack(fill=tk.X, pady=(0, 10))
        ttk.Label(top_frame, text="Manage Clients", style="Header.TLabel").pack(side=tk.LEFT, expand=True)
        ttk.Button(top_frame, text="Refresh", command=self.refresh_clients_data).pack(side=tk.RIGHT, padx=2)
        ttk.Button(top_frame, text="Delete Selected", style="Danger.TButton", command=self.delete_selected_client).pack(side=tk.RIGHT, padx=2)
        ttk.Button(top_frame, text="Edit Selected", command=self.edit_selected_client).pack(side=tk.RIGHT, padx=2)
        ttk.Button(top_frame, text="Add New Client", command=self.open_add_client_window).pack(side=tk.RIGHT, padx=2)
        ttk.Button(top_frame, text="Manage Custom Prices", command=self.open_custom_pricing_window).pack(side=tk.RIGHT, padx=2)

        tree_frame = ttk.Frame(frame)
        tree_frame.pack(expand=True, fill='both')
        self.clients_tree = ttk.Treeview(tree_frame, columns=("id", "username", "company"), show="headings")
        self.clients_tree.pack(side=tk.LEFT, expand=True, fill='both')
        self.clients_tree.bind("<Double-1>", lambda e: self.edit_selected_client())
        self.clients_tree.heading("id", text="ID"); self.clients_tree.column("id", width=60, anchor=tk.CENTER)
        self.clients_tree.heading("username", text="Username"); self.clients_tree.column("username", width=200)
        self.clients_tree.heading("company", text="Company Name"); self.clients_tree.column("company", width=350)
        
    def create_products_tab(self):
        frame = ttk.Frame(self.notebook, padding="10")
        self.notebook.add(frame, text='Products')
        top_frame = ttk.Frame(frame)
        top_frame.pack(fill=tk.X, pady=(0, 10))
        ttk.Label(top_frame, text="Manage Products", style="Header.TLabel").pack(side=tk.LEFT, expand=True)
        ttk.Button(top_frame, text="Refresh", command=self.refresh_products_data).pack(side=tk.RIGHT, padx=2)
        ttk.Button(top_frame, text="Delete Selected", style="Danger.TButton", command=self.delete_selected_product).pack(side=tk.RIGHT, padx=2)
        ttk.Button(top_frame, text="Edit Selected", command=self.edit_selected_product).pack(side=tk.RIGHT, padx=2)
        ttk.Button(top_frame, text="Add New Product", command=self.open_add_product_window).pack(side=tk.RIGHT, padx=2)

        tree_frame = ttk.Frame(frame)
        tree_frame.pack(expand=True, fill='both')
        self.products_tree = ttk.Treeview(tree_frame, columns=("id", "name", "price", "stock"), show="headings")
        self.products_tree.pack(expand=True, fill='both')
        self.products_tree.bind("<Double-1>", lambda e: self.edit_selected_product())
        self.products_tree.heading("id", text="ID"); self.products_tree.column("id", width=60, anchor=tk.CENTER)
        self.products_tree.heading("name", text="Product Name"); self.products_tree.column("name", width=300)
        self.products_tree.heading("price", text="Price (₹)"); self.products_tree.column("price", width=120, anchor=tk.E)
        self.products_tree.heading("stock", text="Stock Qty"); self.products_tree.column("stock", width=120, anchor=tk.CENTER)

    def create_orders_tab(self):
        frame = ttk.Frame(self.notebook, padding="10")
        self.notebook.add(frame, text='Orders')
        top_frame = ttk.Frame(frame)
        top_frame.pack(fill=tk.X, pady=(0, 10))
        ttk.Label(top_frame, text="Manage Orders", style="Header.TLabel").pack(side=tk.LEFT, expand=True)
        ttk.Button(top_frame, text="Refresh", command=self.refresh_orders_data).pack(side=tk.RIGHT, padx=2)
        ttk.Button(top_frame, text="Delete Selected", style="Danger.TButton", command=self.delete_selected_order).pack(side=tk.RIGHT, padx=2)
        ttk.Button(top_frame, text="Create Challan", command=self.create_challan_from_selected_order).pack(side=tk.RIGHT, padx=2)
        tree_frame = ttk.Frame(frame)
        tree_frame.pack(expand=True, fill='both')
        self.orders_tree = ttk.Treeview(tree_frame, columns=("id", "client", "amount", "status", "date", "challan"), show="headings")
        self.orders_tree.pack(expand=True, fill='both')
        self.orders_tree.heading("id", text="Order ID"); self.orders_tree.column("id", width=80, anchor=tk.CENTER)
        self.orders_tree.heading("client", text="Client Company"); self.orders_tree.column("client", width=250)
        self.orders_tree.heading("amount", text="Amount (₹)"); self.orders_tree.column("amount", width=150, anchor=tk.E)
        self.orders_tree.heading("status", text="Status"); self.orders_tree.column("status", width=120, anchor=tk.CENTER)
        self.orders_tree.heading("date", text="Order Date"); self.orders_tree.column("date", width=150, anchor=tk.CENTER)
        self.orders_tree.heading("challan", text="Challan ID"); self.orders_tree.column("challan", width=100, anchor=tk.CENTER)

    def create_challans_tab(self):
        frame = ttk.Frame(self.notebook, padding="10")
        self.notebook.add(frame, text='Challans')
        top_frame = ttk.Frame(frame)
        top_frame.pack(fill=tk.X, pady=(0, 10))
        ttk.Label(top_frame, text="Manage Challans", style="Header.TLabel").pack(side=tk.LEFT, expand=True)
        ttk.Button(top_frame, text="Refresh", command=self.refresh_challans_data).pack(side=tk.RIGHT, padx=2)
        ttk.Button(top_frame, text="Reset Billing Status", command=self.reset_selected_challan_billing).pack(side=tk.RIGHT, padx=2)
        ttk.Button(top_frame, text="Delete Selected", style="Danger.TButton", command=self.delete_selected_challan).pack(side=tk.RIGHT, padx=2)
        ttk.Button(top_frame, text="Download PDF", command=self.download_challan_pdf).pack(side=tk.RIGHT, padx=2)
        tree_frame = ttk.Frame(frame)
        tree_frame.pack(expand=True, fill='both')
        self.challans_tree = ttk.Treeview(tree_frame, columns=("id", "order_id", "client", "amount", "status", "date"), show="headings")
        self.challans_tree.pack(expand=True, fill='both')
        self.challans_tree.heading("id", text="Challan ID"); self.challans_tree.column("id", width=80, anchor=tk.CENTER)
        self.challans_tree.heading("order_id", text="Order ID"); self.challans_tree.column("order_id", width=80, anchor=tk.CENTER)
        self.challans_tree.heading("client", text="Client Company"); self.challans_tree.column("client", width=250)
        self.challans_tree.heading("amount", text="Amount (₹)"); self.challans_tree.column("amount", width=150, anchor=tk.E)
        self.challans_tree.heading("status", text="Status"); self.challans_tree.column("status", width=120, anchor=tk.CENTER)
        self.challans_tree.heading("date", text="Challan Date"); self.challans_tree.column("date", width=150, anchor=tk.CENTER)

    def create_monthly_bills_tab(self):
        frame = ttk.Frame(self.notebook, padding="10")
        self.notebook.add(frame, text='Monthly Bills')
        top_frame = ttk.Frame(frame)
        top_frame.pack(fill=tk.X, pady=(0, 10))
        ttk.Label(top_frame, text="Manage Monthly Bills", style="Header.TLabel").pack(side=tk.LEFT, expand=True)
        bill_actions_frame = ttk.Frame(top_frame)
        bill_actions_frame.pack(side=tk.RIGHT)
        ttk.Button(bill_actions_frame, text="Refresh", command=self.refresh_monthly_bills_data).pack(side=tk.RIGHT, padx=2)
        ttk.Button(bill_actions_frame, text="Delete Selected", style="Danger.TButton", command=self.delete_selected_monthly_bill).pack(side=tk.RIGHT, padx=2)
        ttk.Button(bill_actions_frame, text="Mark as Paid", style="Success.TButton", command=self.open_mark_as_paid_window).pack(side=tk.RIGHT, padx=2)
        ttk.Button(bill_actions_frame, text="Download PDF", command=self.download_monthly_bill_pdf).pack(side=tk.RIGHT, padx=2)

        gen_frame = ttk.LabelFrame(frame, text="Generate New Bill", padding=10)
        gen_frame.pack(fill=tk.X, pady=5)
        ttk.Label(gen_frame, text="Client:").grid(row=0, column=0, padx=5, pady=5, sticky="w")
        self.bill_client_combo = ttk.Combobox(gen_frame, state="readonly", width=30)
        self.bill_client_combo.grid(row=0, column=1, padx=5, pady=5, sticky="ew")
        ttk.Label(gen_frame, text="Month:").grid(row=0, column=2, padx=5, pady=5, sticky="w")
        self.bill_month_combo = ttk.Combobox(gen_frame, state="readonly", width=10, values=[f"{i:02d}" for i in range(1, 13)])
        self.bill_month_combo.grid(row=0, column=3, padx=5, pady=5)
        ttk.Label(gen_frame, text="Year:").grid(row=0, column=4, padx=5, pady=5, sticky="w")
        current_year = datetime.now().year
        self.bill_year_combo = ttk.Combobox(gen_frame, state="readonly", width=10, values=list(range(current_year - 5, current_year + 1)))
        self.bill_year_combo.grid(row=0, column=5, padx=5, pady=5)
        ttk.Button(gen_frame, text="Generate Bill", command=self.generate_monthly_bill).grid(row=0, column=6, padx=15, pady=5)
        gen_frame.grid_columnconfigure(1, weight=1)

        tree_frame = ttk.Frame(frame)
        tree_frame.pack(expand=True, fill='both', pady=(10, 0))
        self.monthly_bills_tree = ttk.Treeview(tree_frame, columns=("id", "client", "month", "amount", "status", "due_date", "payment_date"), show="headings")
        self.monthly_bills_tree.pack(expand=True, fill='both')
        self.monthly_bills_tree.heading("id", text="Bill ID"); self.monthly_bills_tree.column("id", width=80, anchor=tk.CENTER)
        self.monthly_bills_tree.heading("client", text="Client Company"); self.monthly_bills_tree.column("client", width=250)
        self.monthly_bills_tree.heading("month", text="Billing Month"); self.monthly_bills_tree.column("month", width=120, anchor=tk.CENTER)
        self.monthly_bills_tree.heading("amount", text="Amount (₹)"); self.monthly_bills_tree.column("amount", width=120, anchor=tk.E)
        self.monthly_bills_tree.heading("status", text="Status"); self.monthly_bills_tree.column("status", width=100, anchor=tk.CENTER)
        self.monthly_bills_tree.heading("due_date", text="Due Date"); self.monthly_bills_tree.column("due_date", width=120, anchor=tk.CENTER)
        self.monthly_bills_tree.heading("payment_date", text="Payment Date"); self.monthly_bills_tree.column("payment_date", width=120, anchor=tk.CENTER)
    
    def create_challan_from_selected_order(self):
        selected_values = self.get_selected_item(self.orders_tree, "order")
        if not selected_values: return

        selected_id = selected_values[0]
        existing_challan_id = selected_values[5]

        if existing_challan_id and existing_challan_id != 'None':
            messagebox.showwarning("Challan Exists", f"A challan (ID: {existing_challan_id}) already exists for this order.")
            return

        if messagebox.askyesno("Confirm", f"Are you sure you want to create a challan for Order ID: {selected_id}?"):
            try:
                payload = {"order_id": selected_id}
                response = requests.post(f"{API_BASE_URL}/challans", json=payload)
                response.raise_for_status()
                messagebox.showinfo("Success", response.json().get("message", "Challan created successfully."))
                self.refresh_orders_data()
                self.refresh_challans_data()
            except requests.exceptions.RequestException as e:
                error = e.response.json().get('error') if e.response and e.response.content else str(e)
                messagebox.showerror("API Error", f"Failed to create challan: {error}")

    def edit_selected_client(self):
        selected_id = self.get_selected_id(self.clients_tree, "client")
        if not selected_id: return
        client_details = self.fetch_generic_details(f"/clients/{selected_id}")
        if client_details: self.open_add_client_window(client_details)

    def delete_selected_client(self):
        self.handle_delete(self.clients_tree, "client", "/clients", self.refresh_clients_data)

    def edit_selected_product(self):
        selected_id = self.get_selected_id(self.products_tree, "product")
        if not selected_id: return
        product_details = self.fetch_generic_details(f"/products/{selected_id}")
        if product_details: self.open_add_product_window(product_details)
        
    def delete_selected_product(self):
        self.handle_delete(self.products_tree, "product", "/products", self.refresh_products_data)

    def delete_selected_order(self):
        self.handle_delete(self.orders_tree, "order", "/orders", self.refresh_orders_data)

    def delete_selected_challan(self):
        self.handle_delete(self.challans_tree, "challan", "/challans", self.refresh_challans_data)

    def reset_selected_challan_billing(self):
        selected_id = self.get_selected_id(self.challans_tree, "challan")
        if not selected_id: return
        if messagebox.askyesno("Confirm Reset", f"Are you sure you want to reset the billing status for Challan ID {selected_id}? This will make it available for a new monthly bill."):
            try:
                response = requests.post(f"{API_BASE_URL}/challans/{selected_id}/reset-billing")
                response.raise_for_status()
                messagebox.showinfo("Success", response.json().get("message", "Challan status reset."))
                self.refresh_challans_data()
            except requests.exceptions.RequestException as e:
                error = e.response.json().get('error') if e.response and e.response.content else str(e)
                messagebox.showerror("API Error", f"Failed to reset challan status: {error}")

    def delete_selected_monthly_bill(self):
        self.handle_delete(self.monthly_bills_tree, "monthly bill", "/monthly-bills", self.refresh_monthly_bills_data)

    def download_challan_pdf(self):
        selected_id = self.get_selected_id(self.challans_tree, "challan")
        if not selected_id: return
        try:
            response = requests.get(f"{API_BASE_URL}/challans/{selected_id}/pdf")
            response.raise_for_status()
            save_path = filedialog.asksaveasfilename(defaultextension=".pdf", filetypes=[("PDF Documents", "*.pdf")], initialfile=f"Challan_OC{int(selected_id):03d}.pdf", title="Save Challan PDF")
            if save_path:
                with open(save_path, 'wb') as f:
                    f.write(response.content)
                messagebox.showinfo("Success", f"Challan saved to {save_path}")
        except requests.exceptions.RequestException as e:
            error = e.response.json().get('error') if e.response and e.response.content else str(e)
            messagebox.showerror("API Error", f"Failed to download PDF: {error}")

    def download_monthly_bill_pdf(self):
        selected_id = self.get_selected_id(self.monthly_bills_tree, "monthly bill")
        if not selected_id: return
        try:
            response = requests.get(f"{API_BASE_URL}/monthly-bills/{selected_id}/pdf")
            response.raise_for_status()
            save_path = filedialog.asksaveasfilename(defaultextension=".pdf", filetypes=[("PDF Documents", "*.pdf")], initialfile=f"Monthly_Bill_{selected_id}.pdf", title="Save Monthly Bill PDF")
            if save_path:
                with open(save_path, 'wb') as f:
                    f.write(response.content)
                messagebox.showinfo("Success", f"Monthly bill saved to {save_path}")
        except requests.exceptions.RequestException as e:
            error = e.response.json().get('error') if e.response and e.response.content else str(e)
            messagebox.showerror("API Error", f"Failed to download PDF: {error}")

    def open_add_client_window(self, client_data=None):
        title = "Edit Client Details" if client_data else "Add New Client"
        win = tk.Toplevel(self.root)
        win.title(title)
        win.transient(self.root)
        win.grab_set()
        
        form_frame = ttk.Frame(win, padding="20")
        form_frame.pack(expand=True, fill="both")

        fields_to_show = {"username": "Username:", "company_name": "Company Name:"}
        entries = {}
        for i, (field, label_text) in enumerate(fields_to_show.items()):
            ttk.Label(form_frame, text=label_text).grid(row=i, column=0, sticky="w", pady=5, padx=5)
            entry = ttk.Entry(form_Why, width=40)
            entry.grid(row=i, column=1, sticky="ew", pady=5, padx=5)
            if client_data:
                entry.insert(0, client_data.get(field, ''))
            if client_data and field == 'username':
                entry.config(state="disabled")
            entries[field] = entry
        form_frame.grid_columnconfigure(1, weight=1)
        ttk.Button(form_frame, text="Save Client", command=lambda: self.submit_client_form(entries, win, client_data)).grid(row=len(fields_to_show), columnspan=2, pady=20)
        self.center_window(win, 450, 180)

    def open_add_product_window(self, product_data=None):
        title = "Edit Product Details" if product_data else "Add New Product"
        win = tk.Toplevel(self.root)
        win.title(title)
        win.transient(self.root)
        win.grab_set()
        
        form_frame = ttk.Frame(win, padding="20")
        form_frame.pack(expand=True, fill="both")
        
        fields = {"name": "Product Name:", "description": "Description:", "price": "Price (₹):", "stock_quantity": "Stock Quantity:", "low_stock_threshold": "Low Stock Threshold:", "image_url": "Image URL:"}
        entries = {}
        
        row = 0
        ttk.Label(form_frame, text=fields["name"]).grid(row=row, column=0, sticky="w", pady=5, padx=5); entries["name"] = ttk.Entry(form_frame, width=50); entries["name"].grid(row=row, column=1, sticky="ew", pady=5, padx=5); row+=1
        ttk.Label(form_frame, text=fields["description"]).grid(row=row, column=0, sticky="nw", pady=5, padx=5); entries["description"] = tk.Text(form_frame, width=50, height=4, font=("Helvetica", 9)); entries["description"].grid(row=row, column=1, sticky="ew", pady=5, padx=5); row+=1
        ttk.Label(form_frame, text=fields["price"]).grid(row=row, column=0, sticky="w", pady=5, padx=5); entries["price"] = ttk.Entry(form_frame); entries["price"].grid(row=row, column=1, sticky="ew", pady=5, padx=5); row+=1
        ttk.Label(form_frame, text=fields["stock_quantity"]).grid(row=row, column=0, sticky="w", pady=5, padx=5); entries["stock_quantity"] = ttk.Entry(form_frame); entries["stock_quantity"].grid(row=row, column=1, sticky="ew", pady=5, padx=5); row+=1
        ttk.Label(form_frame, text=fields["low_stock_threshold"]).grid(row=row, column=0, sticky="w", pady=5, padx=5); entries["low_stock_threshold"] = ttk.Entry(form_frame); entries["low_stock_threshold"].grid(row=row, column=1, sticky="ew", pady=5, padx=5); row+=1
        ttk.Label(form_frame, text=fields["image_url"]).grid(row=row, column=0, sticky="w", pady=5, padx=5); entries["image_url"] = ttk.Entry(form_frame); entries["image_url"].grid(row=row, column=1, sticky="ew", pady=5, padx=5); row+=1
        
        form_frame.grid_columnconfigure(1, weight=1)

        if product_data:
            entries["name"].insert(0, product_data.get("name", ""))
            entries["description"].insert("1.0", product_data.get("description", ""))
            entries["price"].insert(0, product_data.get("price", "0.00"))
            entries["stock_quantity"].insert(0, product_data.get("stock_quantity", "0"))
            entries["low_stock_threshold"].insert(0, product_data.get("low_stock_threshold", "10"))
            entries["image_url"].insert(0, product_data.get("image_url", ""))
        
        ttk.Button(form_frame, text="Save Product", command=lambda: self.submit_product_form(entries, win, product_data)).grid(row=row, columnspan=2, pady=20)
        self.center_window(win, 550, 450)

    def open_mark_as_paid_window(self):
        selected_bill = self.get_selected_item(self.monthly_bills_tree, "monthly bill")
        if not selected_bill: return
        
        bill_id, client_name, _, _, status, _, _ = selected_bill
        if status == 'Paid':
            messagebox.showinfo("Already Paid", f"Bill #{bill_id} for {client_name} is already marked as paid.")
            return

        win = tk.Toplevel(self.root)
        win.title(f"Record Payment for Bill #{bill_id}")
        win.transient(self.root)
        win.grab_set()

        form_frame = ttk.Frame(win, padding="20")
        form_frame.pack(expand=True, fill="both")
        
        ttk.Label(form_frame, text=f"Client: {client_name}").grid(row=0, column=0, columnspan=2, sticky="w", pady=(0,10))

        ttk.Label(form_frame, text="Payment Date:").grid(row=1, column=0, sticky="w", pady=5, padx=5)
        date_entry = ttk.Entry(form_frame, width=30)
        date_entry.grid(row=1, column=1, sticky="ew", pady=5, padx=5)
        date_entry.insert(0, datetime.now().strftime("%Y-%m-%d"))

        ttk.Label(form_frame, text="Payment Method:").grid(row=2, column=0, sticky="w", pady=5, padx=5)
        method_combo = ttk.Combobox(form_frame, state="readonly", values=["Bank Transfer", "Cash", "Cheque", "Online"])
        method_combo.grid(row=2, column=1, sticky="ew", pady=5, padx=5)
        method_combo.set("Bank Transfer")
        
        form_frame.grid_columnconfigure(1, weight=1)

        def submit():
            payload = {"payment_date": date_entry.get(), "payment_method": method_combo.get()}
            try:
                response = requests.put(f"{API_BASE_URL}/monthly-bills/{bill_id}/payment", json=payload)
                response.raise_for_status()
                messagebox.showinfo("Success", response.json().get("message"), parent=win)
                win.destroy()
                self.refresh_monthly_bills_data()
            except requests.exceptions.RequestException as e:
                error = e.response.json().get('error') if e.response and e.response.content else str(e)
                messagebox.showerror("API Error", f"Failed to record payment: {error}", parent=win)

        ttk.Button(form_frame, text="Save Payment", command=submit).grid(row=3, columnspan=2, pady=20)
        self.center_window(win, 400, 220)

    def open_custom_pricing_window(self):
        selected_client = self.get_selected_item(self.clients_tree, "client")
        if not selected_client: return
        client_id, _, client_name = selected_client
        
        win = tk.Toplevel(self.root)
        win.title(f"Custom Pricing for {client_name}")
        win.transient(self.root)
        win.grab_set()

        all_products = self.products_list
        custom_prices_raw = self.fetch_generic_details(f"/clients/{client_id}/pricing")
        if all_products is None or custom_prices_raw is None:
            messagebox.showerror("Error", "Could not load products or custom prices.", parent=win)
            win.destroy()
            return
            
        custom_prices_map = {item['product_id']: item['custom_price'] for item in custom_prices_raw}

        frame = ttk.Frame(win, padding="10")
        frame.pack(expand=True, fill='both')

        tree = ttk.Treeview(frame, columns=("id", "name", "default_price", "custom_price"), show="headings")
        tree.pack(expand=True, fill='both')
        tree.heading("id", text="ID"); tree.column("id", width=50)
        tree.heading("name", text="Product"); tree.column("name", width=250)
        tree.heading("default_price", text="Default Price (₹)"); tree.column("default_price", width=120, anchor=tk.E)
        tree.heading("custom_price", text="Custom Price (₹)"); tree.column("custom_price", width=120, anchor=tk.E)

        for prod in all_products:
            custom_price = custom_prices_map.get(prod['product_id'], '')
            tree.insert("", "end", values=(prod['product_id'], prod['name'], f"{prod['price']:.2f}", custom_price))

        entry_var = tk.StringVar()
        entry = ttk.Entry(win, textvariable=entry_var)
        
        def on_tree_select(event):
            selected_item = tree.focus()
            if not selected_item: return
            values = tree.item(selected_item, "values")
            col = tree.identify_column(event.x)
            if col == '#4': # Custom price column
                x, y, width, height = tree.bbox(selected_item, col)
                entry.place(x=x, y=y, width=width, height=height)
                entry_var.set(values[3])
                entry.focus()
                entry.icursor(tk.END)
                entry.item_id = selected_item

        def on_entry_confirm(event):
            new_val = entry_var.get()
            item_id = entry.item_id
            values = list(tree.item(item_id, "values"))
            values[3] = new_val
            tree.item(item_id, values=values)
            entry.place_forget()

        tree.bind("<Button-1>", on_tree_select)
        entry.bind("<Return>", on_entry_confirm)
        entry.bind("<FocusOut>", on_entry_confirm)
        
        def save_prices():
            for item_id in tree.get_children():
                values = tree.item(item_id, "values")
                product_id, _, _, custom_price_str = values
                if custom_price_str.strip():
                    try:
                        custom_price = float(custom_price_str)
                        payload = {"product_id": product_id, "custom_price": custom_price}
                        response = requests.post(f"{API_BASE_URL}/clients/{client_id}/pricing", json=payload)
                        response.raise_for_status()
                    except (ValueError, requests.exceptions.RequestException) as e:
                        messagebox.showerror("Save Error", f"Failed to save price for product ID {product_id}: {e}", parent=win)
                        return
            messagebox.showinfo("Success", "Custom prices saved successfully.", parent=win)
            win.destroy()

        ttk.Button(frame, text="Save All Changes", command=save_prices).pack(pady=10)
        self.center_window(win, 600, 500)
    
    def submit_client_form(self, entries, window, client_data=None):
        payload = {field: entry.get() for field, entry in entries.items()}
        if not client_data and (not payload.get('username') or not payload.get('company_name')):
            messagebox.showerror("Validation Error", "Username and Company Name are required for new clients.", parent=window)
            return
        try:
            if client_data:
                response = requests.put(f"{API_BASE_URL}/clients/{client_data['client_id']}", json=payload)
            else:
                response = requests.post(f"{API_BASE_URL}/clients", json=payload)
            response.raise_for_status()
            messagebox.showinfo("Success", response.json().get("message"), parent=window)
            window.destroy()
            self.refresh_clients_data()
        except requests.exceptions.RequestException as e:
            error = e.response.json().get('error') if e.response and e.response.content else str(e)
            messagebox.showerror("API Error", f"Failed to save client: {error}", parent=window)
    
    def submit_product_form(self, entries, window, product_data=None):
        payload = {
            "name": entries["name"].get(), "description": entries["description"].get("1.0", "end-1c"),
            "price": entries["price"].get(), "stock_quantity": entries["stock_quantity"].get(),
            "low_stock_threshold": entries["low_stock_threshold"].get(), "image_url": entries["image_url"].get()
        }
        if not payload["name"] or not payload["price"] or not payload["stock_quantity"]:
            messagebox.showerror("Validation Error", "Name, Price, and Stock Quantity are required.", parent=window)
            return
        try:
            float(payload["price"]); int(payload["stock_quantity"]); int(payload["low_stock_threshold"])
        except ValueError:
            messagebox.showerror("Validation Error", "Price, Stock, and Threshold must be valid numbers.", parent=window)
            return
        try:
            if product_data:
                response = requests.put(f"{API_BASE_URL}/products/{product_data['product_id']}", json=payload)
            else:
                response = requests.post(f"{API_BASE_URL}/products", json=payload)
            response.raise_for_status()
            messagebox.showinfo("Success", response.json().get("message"), parent=window)
            window.destroy()
            self.refresh_products_data()
            self.refresh_dashboard_data()
        except requests.exceptions.RequestException as e:
            error = e.response.json().get('error') if e.response and e.response.content else str(e)
            messagebox.showerror("API Error", f"Failed to save product: {error}", parent=window)

    def generate_monthly_bill(self):
        client_selection = self.bill_client_combo.get()
        month = self.bill_month_combo.get()
        year = self.bill_year_combo.get()
        if not client_selection or not month or not year:
            messagebox.showwarning("Input Error", "Please select a client, month, and year.")
            return
        client_id = next((c['client_id'] for c in self.clients_list if (c.get('company_name') or c.get('username')) == client_selection), None)
        if not client_id:
            messagebox.showerror("Error", "Could not find the selected client's ID. Please refresh.")
            return
        billing_month = f"{year}-{month}"
        if not messagebox.askyesno("Confirm", f"Generate a bill for {client_selection} for {billing_month}?"): return
        try:
            response = requests.post(f"{API_BASE_URL}/monthly-bills", json={"client_id": client_id, "billing_month": billing_month})
            response.raise_for_status()
            messagebox.showinfo("Success", response.json().get("message", "Bill generated."))
            self.refresh_monthly_bills_data()
            self.refresh_challans_data()
        except requests.exceptions.RequestException as e:
            error = e.response.json().get('error') if e.response and e.response.content else str(e)
            messagebox.showerror("API Error", f"Failed to generate bill: {error}")

    def refresh_dashboard_data(self):
        # --- 1. Refresh Key Metrics ---
        summary_data = self.fetch_generic_details("/dashboard-summary")
        
        # Get the default label foreground color to reset it
        default_fg = ttk.Style().lookup("TLabel", "foreground")

        if summary_data:
            self.metric_new_orders_label.config(text=str(summary_data.get('new_orders_today', '--')))
            self.metric_pending_challans_label.config(text=str(summary_data.get('pending_challans', '--')))
            self.metric_unbilled_challans_label.config(text=str(summary_data.get('unbilled_challans', '--')))
            
            overdue_count = summary_data.get('overdue_bills', 0)
            self.metric_overdue_bills_label.config(text=str(overdue_count))
            
            # Add a visual alert for overdue bills
            if overdue_count > 0:
                self.metric_overdue_bills_label.config(foreground="#dc3545") # Red alert
            else:
                self.metric_overdue_bills_label.config(foreground="#28a745") # Green (Success)

        else:
            # Show error on all labels if API fails
            error_text = "N/A"
            self.metric_new_orders_label.config(text=error_text)
            self.metric_pending_challans_label.config(text=error_text)
            self.metric_unbilled_challans_label.config(text=error_text)
            self.metric_overdue_bills_label.config(text=error_text, foreground=default_fg)

        # --- 2. Refresh Low Stock Alerts (Existing Code) ---
        for widget in self.alerts_content_frame.winfo_children(): widget.destroy()
        low_stock_data = self.fetch_generic_details("/products/low-stock")
        if low_stock_data is None:
            ttk.Label(self.alerts_content_frame, text="Failed to load data.", foreground="red").pack(anchor="w")
            return
            
        if not low_stock_data:
            ttk.Label(self.alerts_content_frame, text="No low stock items. Everything looks good!", foreground="green").pack(anchor="w")
        else:
            for item in low_stock_data:
                alert_text = f"❗ {item['name']} - Remaining: {item['stock_quantity']} (Threshold: {item['low_stock_threshold']})"
                ttk.Label(self.alerts_content_frame, text=alert_text, foreground="#dd4b39").pack(anchor="w", pady=2)

    def refresh_clients_data(self):
        clients_data = self.fetch_generic_details("/clients")
        tree = self.clients_tree; tree.delete(*tree.get_children())
        if clients_data:
            self.clients_list = clients_data
            client_display_names = [c.get('company_name') or c.get('username') for c in clients_data]
            self.bill_client_combo['values'] = sorted(client_display_names)
            for client in clients_data:
                tree.insert("", "end", values=(client.get('client_id'), client.get('username'), client.get('company_name', 'N/A')))

    def refresh_products_data(self):
        products_data = self.fetch_generic_details("/products")
        tree = self.products_tree; tree.delete(*tree.get_children())
        if products_data:
            self.products_list = products_data
            for product in products_data:
                tree.insert("", "end", values=(product.get('product_id'), product.get('name'), f"{product.get('price', 0):,.2f}", product.get('stock_quantity')))

    def refresh_orders_data(self):
        orders_data = self.fetch_generic_details("/orders")
        tree = self.orders_tree; tree.delete(*tree.get_children())
        if orders_data:
            for order in orders_data:
                tree.insert("", "end", values=(order.get('order_id'), order.get('client_name', 'N/A'), f"{order.get('total_amount', 0):,.2f}", order.get('status'), order.get('order_date', '').split('T')[0], order.get('associated_challan_id', 'None')))

    def refresh_challans_data(self):
        data = self.fetch_generic_details("/challans")
        tree = self.challans_tree; tree.delete(*tree.get_children())
        if data:
            for item in data:
                tree.insert("", "end", values=(item.get('challan_id'), item.get('order_id', 'N/A'), item.get('client_name', 'N/A'), f"{item.get('total_amount', 0):,.2f}", item.get('status'), item.get('challan_date', '').split('T')[0]))

    def refresh_monthly_bills_data(self):
        data = self.fetch_generic_details("/monthly-bills")
        tree = self.monthly_bills_tree; tree.delete(*tree.get_children())
        if data:
            for item in data:
                p_date = item.get('payment_date')
                tree.insert("", "end", values=(
                    item.get('bill_id'), item.get('client_name', 'N/A'),
                    item.get('billing_month'), f"{item.get('total_amount', 0):,.2f}",
                    item.get('status'), item.get('due_date', '').split('T')[0],
                    p_date.split('T')[0] if p_date else 'N/A'
                ))

    def refresh_all_data(self):
        self.refresh_dashboard_data()
        self.refresh_products_data() # Must be before clients for pricing window
        self.refresh_clients_data()
        self.refresh_orders_data()
        self.refresh_challans_data()
        self.refresh_monthly_bills_data()

if __name__ == "__main__":
    root = tk.Tk()
    app = AdminDashboard(root)
    root.mainloop()